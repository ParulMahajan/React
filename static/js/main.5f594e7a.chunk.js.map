{"version":3,"sources":["components/card/card.component.jsx","components/card-ist/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handler","type","onChange","App","handleEvent","e","setState","searchMonster","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6SAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BAEtB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCPTC,G,MAAW,SAAAR,GAGpB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAU,YAAf,SAEHD,EAAMW,SAASC,KAAK,SAAAR,GAAO,OAEzB,aADL,CACM,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPhBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,QAAf,OAErB,uBAAOd,UAAU,SACVe,KAAK,SACLF,YAAeA,EACfG,SAAWF,MCqCPG,E,kDArCZ,aAAe,IAAD,8BACX,gBAcFC,YAAc,SAAAC,GACV,EAAKC,SAAU,CAACC,cAAeF,EAAEG,OAAOC,SAd1C,EAAKC,MAAQ,CACXd,SAAU,GACVW,cAAe,IAJN,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAE5BF,MAAM,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAACV,SAASmB,S,oBAO9C,WACE,MAAoCC,KAAKN,MAAjCd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,cACZU,EAAmBrB,EAASsB,QAAQ,SAAA7B,GAAO,OAAIA,EAAQE,KAAK4B,cAAcC,SAASb,EAAcY,kBAEvG,OACE,sBAAKjC,UAAU,MAAf,UACA,mDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,QAAUgB,KAAKZ,cACxD,cAAC,EAAD,CAAUR,SAAUqB,W,GA7BNI,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IAIFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.5f594e7a.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\n\nexport const Card = props => (\n\n    <div className='card-container'>\n    <img alt='Monster' src= { `https://robohash.org/${props.monster.id}?set=set2&size=100x100` }\n    />\n    <h2> {props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n    </div>\n\n);","import React  from \"react\";\nimport { Card } from \"../card/card.component\";\nimport './card-list.styles.css';\nexport const CardList = props => {\n\n    console.log(props)\n    return <div className='card-list'> \n    {\n        props.monsters.map( monster => \n     //     <h1 key={monster.id} >  { monster.name }</h1> \n          <Card key={monster.id} monster={monster} ></Card>\n          )\n      }\n    </div>\n}\n\n\n","import React from \"react\";\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeholder, handler}) => (\n\n    <input className='search'\n           type='search' \n           placeholder = {placeholder}\n           onChange= {handler }\n       />\n);","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-ist/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends React.Component{\n\n   constructor (){\n      super();\n      this.state = {\n        monsters: [],\n        searchMonster: ''\n     }\n    }\n\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then( response => response.json())\n   //   .then( users => console.log(users))\n     .then( users => this.setState( {monsters:users} ))\n    }\n\n    handleEvent = e => {\n        this.setState( {searchMonster: e.target.value} )\n       } ;\n      \nrender() {\n  const { monsters, searchMonster } = this.state;\n  const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchMonster.toLowerCase()));\n\n  return (\n    <div className=\"App\">\n    <h1> Monster Rolodex </h1>\n    <SearchBox placeholder='search monsters' handler= {this.handleEvent}  />\n    <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n // <React.StrictMode>\n    <App />\n // </React.StrictMode>\n ,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}